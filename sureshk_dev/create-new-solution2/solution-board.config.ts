export const JOIN_TABLE_KEYS: any[] = [
  {
    type: null,
    primaryTableList: [],
    selectedPrimaryTable: '',
    optionValue: 'select Primary Table',
    order: 1,
  },
  {
    type: null,
    primaryKeyList: [],
    selectedPrimaryKey: '',
    optionValue: 'select Primary Key',
    order: 1,
  },
  {
    type: null,
    mergeType: '',
    optionValue: 'select Join Type',
    selectedMergeType: '',
    order: 1,
  },
  {
    type: null,
    foreignTableList: [],
    selectedForeignTable: '',
    optionValue: 'select Foreign Table',
    order: 1,
  },
  {
    type: null,
    foreignKeyList: [],
    selectedForeignKey: '',
    optionValue: 'select Foreign Key',
    order: 1,
  },
];

export const messages = [
  {
    Fueling_Position: 'Conditional Functions',
    Components: [
      { Component: 'IF c THEN t ELSE f ENDIF' },
      { Component: 'IF c THEN t ELSEIF c2 THEN t2 ELSE f ENDIF' },
      { Component: 'IIF(bool, x, y)' },
      { Component: 'NOT(<logical>)' },
      { Component: 'AND(<logical1>,<logical2>)' },
      { Component: 'OR(<logical1>,<logical2>)' },
      { Component: 'IFERROR(value, value_if_error)' },
      { Component: 'Switch(Value,Default,Case1,Result1,...,CaseN,ResultN)' },
    ],
  },
  {
    Fueling_Position: 'Conversion',
    Components: [
      { Component: 'BinToInt(s)' },
      { Component: 'CharFromInt(x)' },
      { Component: 'CharToInt(s)' },
      { Component: 'ConvertFromCodePage(s, codePage)' },
      { Component: 'ConvertToCodePage(s, codePage)' },
      { Component: 'HexToNumber(x)' },
      { Component: 'IntToBin(x)' },
      { Component: 'IntToHex(x)' },
      {
        Component:
          'ToNumber(x, [bIgnoreErrors], [keepNulls], [decimalSeparator])',
      },
      {
        Component:
          'ToString(x, numDec, [addThousandsSeparator], [decimalSeparator])',
      },
    ],
  },
  {
    Fueling_Position: 'DateTime',
    Components: [
      { Component: 'DateTimeAdd' },
      { Component: 'DateTimeDay' },
      { Component: 'DateTimeDiff' },
      { Component: 'DateTimeFirstOfMonth' },
      { Component: 'DateTimeFormat' },
      { Component: 'DateTimeHour' },
      { Component: 'DateTimeLastOfMonth' },
      { Component: 'DateTimeMinutes' },
      { Component: 'DateTimeMonth' },
      { Component: 'DateTimeNow' },
      { Component: 'DateTimeParse' },
      { Component: 'DateTimeSeconds' },
      { Component: 'DateTimeStart' },
      { Component: 'DateTimeToday' },
      { Component: 'DateTimeToLocal' },
      { Component: 'DateTimeToUTC' },
      { Component: 'DateTimeTrim' },
      { Component: 'DateTimeYear' },
      { Component: 'ToDate' },
      { Component: 'ToDateTime' },
    ],
  },
  {
    Fueling_Position: 'File',
    Components: [
      { Component: 'FileAddPaths' },
      { Component: 'FileExists' },
      { Component: 'FileGetDir' },
      { Component: 'FileGetExt' },
      { Component: 'FileGetFileName' },
    ],
  },
  {
    Fueling_Position: 'Finance',
    Components: [
      { Component: 'FinanceCAGR' },
      { Component: 'FinanceEffectiveRate' },
      { Component: 'FinanceFV' },
      { Component: 'FinanceFVSchedule' },
      { Component: 'FinanceIRR' },
      { Component: 'FinanceMIRR' },
      { Component: 'FinanceMXIRR' },
      { Component: 'FinanceNominalRate' },
      { Component: 'FinanceNPER' },
      { Component: 'FinanceNPV' },
      { Component: 'FinancePMT' },
      { Component: 'FinancePV' },
      { Component: 'FinanceRate' },
      { Component: 'FinanceXIRR' },
      { Component: 'FinanceXNPV' },
    ],
  },
  {
    Fueling_Position: 'Math',
    Components: [
      { Component: 'ABS' },
      { Component: 'ACOS' },
      { Component: 'ASIN' },
      { Component: 'ATAN' },
      { Component: 'ATAN2' },
      { Component: 'Average' },
      { Component: 'CEIL' },
      { Component: 'COS' },
      { Component: 'COSH' },
      { Component: 'EXP' },
      { Component: 'FLOOR' },
      { Component: 'LOG' },
      { Component: 'LOG10' },
      { Component: 'Median' },
      { Component: 'Mod' },
      { Component: 'PI' },
      { Component: 'POW' },
      { Component: 'RAND' },
      { Component: 'RandInt' },
      { Component: 'Round' },
      { Component: 'SIN' },
      { Component: 'SINH' },
      { Component: 'SmartRound' },
      { Component: 'SQRT' },
      { Component: 'TAN' },
      { Component: 'TANH' },
    ],
  },
  {
    Fueling_Position: 'Math: Bitwise',
    Components: [
      { Component: 'BinaryAnd' },
      { Component: 'BinaryNot' },
      { Component: 'BinaryOr' },
      { Component: 'BinaryXOR' },
      { Component: 'ShiftLeft' },
      { Component: 'ShiftRight' },
    ],
  },
  {
    Fueling_Position: 'Min/Max',
    Components: [
      { Component: 'Bound' },
      { Component: 'Max' },
      { Component: 'MaxIDX' },
      { Component: 'Min' },
      { Component: 'MinIDX' },
    ],
  },
  {
    Fueling_Position: 'Operators',
    Components: [
      { Component: 'Block Comment(/* */)' },
      { Component: 'Single Line Comment(//)' },
      { Component: 'Addition' },
      { Component: 'Boolean AND &&' },
      { Component: 'Boolean AND - Keyword' },
      { Component: 'Boolean NOT !' },
      { Component: 'Boolean OR - Keyword' },
      { Component: 'Boolean OR ||' },
      { Component: 'Close Parenthesis)' },
      { Component: 'Division' },
      { Component: 'Equal To' },
      { Component: '>: Greater Than' },
      { Component: '>=: Greater Than Or Equal To' },
      { Component: '<: Less Than' },
      { Component: '<=: Less Than Or Equal' },
      { Component: 'Multiplication' },
      { Component: 'Not Equal To' },
      { Component: 'Open Parenthesis' },
      { Component: 'Subtraction' },
      { Component: 'Value IN (...) - Keyword' },
      { Component: 'Value NOT IN (...) - Keyword' },
    ],
  },
  {
    Fueling_Position: 'Spatial',
    Components: [
      { Component: 'ST_Area' },
      { Component: 'ST_Boundary' },
      { Component: 'ST_BoundingRectangle' },
      { Component: 'ST_Centroid' },
      { Component: 'ST_CentroidX' },
      { Component: 'ST_CentroidY' },
      { Component: 'ST_Combine' },
      { Component: 'ST_Contains' },
      { Component: 'ST_ConvexHull' },
      { Component: 'ST_CreateLine' },
      { Component: 'ST_CreatePoint' },
      { Component: 'ST_CreatePolygon' },
      { Component: 'ST_Cut' },
      { Component: 'ST_Dimension' },
      { Component: 'ST_Distance' },
      { Component: 'ST_EndPoint' },
      { Component: 'ST_Intersection' },
      { Component: 'ST_Intersects' },
      { Component: 'ST_InverseIntersection' },
      { Component: 'ST_Length' },
      { Component: 'ST_MD5' },
      { Component: 'ST_MaxX' },
      { Component: 'ST_MaxY' },
      { Component: 'ST_MinX' },
      { Component: 'ST_MinY' },
      { Component: 'ST_NumParts' },
      { Component: 'ST_NumPoints' },
      { Component: 'ST_ObjectType' },
      { Component: 'ST_PointN' },
      { Component: 'ST_RandomPoint' },
      { Component: 'ST_Relate' },
      { Component: 'ST_StartPoint' },
      { Component: 'ST_Touches' },
      { Component: 'ST_TouchesOrIntersects' },
      { Component: 'ST_Within' },
    ],
  },
  {
    Fueling_Position: 'Specialized',
    Components: [
      { Component: 'EscapeXMLMetacharacters' },
      { Component: 'GetVal' },
      { Component: 'GetEnvironmentVariable' },
      { Component: 'NULL' },
      { Component: 'RangeMedian' },
      { Component: 'ReadRegistryString' },
      { Component: 'Soundex_Digits' },
      { Component: 'TOPNIDX' },
      { Component: 'UrlEncode' },
      { Component: 'Message' },
      { Component: 'Soundex' },
    ],
  },
  {
    Fueling_Position: 'String',
    Components: [
      { Component: 'Contains' },
      { Component: 'CountWords' },
      { Component: 'DecomposeUnicodeForMatch' },
      { Component: 'EndsWith' },
      { Component: 'FindString' },
      { Component: 'GetWord' },
      { Component: 'Left' },
      { Component: 'Length' },
      { Component: 'LowerCase' },
      { Component: 'MD5_ASCII' },
      { Component: 'MD5_UNICODE' },
      { Component: 'MD5_UTF8' },
      { Component: 'PadLeft' },
      { Component: 'PadRight' },
      { Component: 'REGEX_CountMatches' },
      { Component: 'REGEX_Match' },
      { Component: 'REGEX_Replace' },
      { Component: 'Replace' },
      { Component: 'ReplaceChar' },
      { Component: 'ReplaceFirst' },
      { Component: 'ReverseString' },
      { Component: 'Right' },
      { Component: 'StartsWith' },
      { Component: 'STRCSPN' },
      { Component: 'StripQuotes' },
      { Component: 'STRSPN' },
      { Component: 'Substring' },
      { Component: 'TitleCase' },
      { Component: 'Trim' },
      { Component: 'TrimLeft' },
      { Component: 'TrimRight' },
      { Component: 'UpperCase' },
      { Component: 'UuidCreate' },
    ],
  },
  {
    Fueling_Position: 'Test',
    Components: [
      { Component: 'CompareDictionary' },
      { Component: 'CompareDigits' },
      { Component: 'CompareEpsilon' },
      { Component: 'IsEmpty' },
      { Component: 'IsInteger' },
      { Component: 'IsNull' },
      { Component: 'IsNumber' },
      { Component: 'IsSpatialObj' },
      { Component: 'IsString' },
    ],
  },
];

export const messagesSearch = [
  {
    Fueling_Position: 'Conditional Functions',
    Components: [
      { Component: 'IF c THEN t ELSE f ENDIF' },
      { Component: 'IF c THEN t ELSEIF c2 THEN t2 ELSE f ENDIF' },
      { Component: 'IIF(bool, x, y)' },
      { Component: 'NOT(<logical>)' },
      { Component: 'AND(<logical1>,<logical2>)' },
      { Component: 'OR(<logical1>,<logical2>)' },
      { Component: 'IFERROR(value, value_if_error)' },
      { Component: 'Switch(Value,Default,Case1,Result1,...,CaseN,ResultN)' },
    ],
  },
  {
    Fueling_Position: 'Conversion',
    Components: [
      { Component: 'BinToInt(s)' },
      { Component: 'CharFromInt(x)' },
      { Component: 'CharToInt(s)' },
      { Component: 'ConvertFromCodePage(s, codePage)' },
      { Component: 'ConvertToCodePage(s, codePage)' },
      { Component: 'HexToNumber(x)' },
      { Component: 'IntToBin(x)' },
      { Component: 'IntToHex(x)' },
      {
        Component:
          'ToNumber(x, [bIgnoreErrors], [keepNulls], [decimalSeparator])',
      },
      {
        Component:
          'ToString(x, numDec, [addThousandsSeparator], [decimalSeparator])',
      },
    ],
  },
  {
    Fueling_Position: 'DateTime',
    Components: [
      { Component: 'DateTimeAdd' },
      { Component: 'DateTimeDay' },
      { Component: 'DateTimeDiff' },
      { Component: 'DateTimeFirstOfMonth' },
      { Component: 'DateTimeFormat' },
      { Component: 'DateTimeHour' },
      { Component: 'DateTimeLastOfMonth' },
      { Component: 'DateTimeMinutes' },
      { Component: 'DateTimeMonth' },
      { Component: 'DateTimeNow' },
      { Component: 'DateTimeParse' },
      { Component: 'DateTimeSeconds' },
      { Component: 'DateTimeStart' },
      { Component: 'DateTimeToday' },
      { Component: 'DateTimeToLocal' },
      { Component: 'DateTimeToUTC' },
      { Component: 'DateTimeTrim' },
      { Component: 'DateTimeYear' },
      { Component: 'ToDate' },
      { Component: 'ToDateTime' },
    ],
  },
  {
    Fueling_Position: 'File',
    Components: [
      { Component: 'FileAddPaths' },
      { Component: 'FileExists' },
      { Component: 'FileGetDir' },
      { Component: 'FileGetExt' },
      { Component: 'FileGetFileName' },
    ],
  },
  {
    Fueling_Position: 'Finance',
    Components: [
      { Component: 'FinanceCAGR' },
      { Component: 'FinanceEffectiveRate' },
      { Component: 'FinanceFV' },
      { Component: 'FinanceFVSchedule' },
      { Component: 'FinanceIRR' },
      { Component: 'FinanceMIRR' },
      { Component: 'FinanceMXIRR' },
      { Component: 'FinanceNominalRate' },
      { Component: 'FinanceNPER' },
      { Component: 'FinanceNPV' },
      { Component: 'FinancePMT' },
      { Component: 'FinancePV' },
      { Component: 'FinanceRate' },
      { Component: 'FinanceXIRR' },
      { Component: 'FinanceXNPV' },
    ],
  },
  {
    Fueling_Position: 'Math',
    Components: [
      { Component: 'ABS' },
      { Component: 'ACOS' },
      { Component: 'ASIN' },
      { Component: 'ATAN' },
      { Component: 'ATAN2' },
      { Component: 'Average' },
      { Component: 'CEIL' },
      { Component: 'COS' },
      { Component: 'COSH' },
      { Component: 'EXP' },
      { Component: 'FLOOR' },
      { Component: 'LOG' },
      { Component: 'LOG10' },
      { Component: 'Median' },
      { Component: 'Mod' },
      { Component: 'PI' },
      { Component: 'POW' },
      { Component: 'RAND' },
      { Component: 'RandInt' },
      { Component: 'Round' },
      { Component: 'SIN' },
      { Component: 'SINH' },
      { Component: 'SmartRound' },
      { Component: 'SQRT' },
      { Component: 'TAN' },
      { Component: 'TANH' },
    ],
  },
  {
    Fueling_Position: 'Math: Bitwise',
    Components: [
      { Component: 'BinaryAnd' },
      { Component: 'BinaryNot' },
      { Component: 'BinaryOr' },
      { Component: 'BinaryXOR' },
      { Component: 'ShiftLeft' },
      { Component: 'ShiftRight' },
    ],
  },
  {
    Fueling_Position: 'Min/Max',
    Components: [
      { Component: 'Bound' },
      { Component: 'Max' },
      { Component: 'MaxIDX' },
      { Component: 'Min' },
      { Component: 'MinIDX' },
    ],
  },
  {
    Fueling_Position: 'Operators',
    Components: [
      { Component: 'Block Comment(/* */)' },
      { Component: 'Single Line Comment(//)' },
      { Component: 'Addition' },
      { Component: 'Boolean AND &&' },
      { Component: 'Boolean AND - Keyword' },
      { Component: 'Boolean NOT !' },
      { Component: 'Boolean OR - Keyword' },
      { Component: 'Boolean OR ||' },
      { Component: 'Close Parenthesis)' },
      { Component: 'Division' },
      { Component: 'Equal To' },
      { Component: '>: Greater Than' },
      { Component: '>=: Greater Than Or Equal To' },
      { Component: '<: Less Than' },
      { Component: '<=: Less Than Or Equal' },
      { Component: 'Multiplication' },
      { Component: 'Not Equal To' },
      { Component: 'Open Parenthesis' },
      { Component: 'Subtraction' },
      { Component: 'Value IN (...) - Keyword' },
      { Component: 'Value NOT IN (...) - Keyword' },
    ],
  },
  {
    Fueling_Position: 'Spatial',
    Components: [
      { Component: 'ST_Area' },
      { Component: 'ST_Boundary' },
      { Component: 'ST_BoundingRectangle' },
      { Component: 'ST_Centroid' },
      { Component: 'ST_CentroidX' },
      { Component: 'ST_CentroidY' },
      { Component: 'ST_Combine' },
      { Component: 'ST_Contains' },
      { Component: 'ST_ConvexHull' },
      { Component: 'ST_CreateLine' },
      { Component: 'ST_CreatePoint' },
      { Component: 'ST_CreatePolygon' },
      { Component: 'ST_Cut' },
      { Component: 'ST_Dimension' },
      { Component: 'ST_Distance' },
      { Component: 'ST_EndPoint' },
      { Component: 'ST_Intersection' },
      { Component: 'ST_Intersects' },
      { Component: 'ST_InverseIntersection' },
      { Component: 'ST_Length' },
      { Component: 'ST_MD5' },
      { Component: 'ST_MaxX' },
      { Component: 'ST_MaxY' },
      { Component: 'ST_MinX' },
      { Component: 'ST_MinY' },
      { Component: 'ST_NumParts' },
      { Component: 'ST_NumPoints' },
      { Component: 'ST_ObjectType' },
      { Component: 'ST_PointN' },
      { Component: 'ST_RandomPoint' },
      { Component: 'ST_Relate' },
      { Component: 'ST_StartPoint' },
      { Component: 'ST_Touches' },
      { Component: 'ST_TouchesOrIntersects' },
      { Component: 'ST_Within' },
    ],
  },
  {
    Fueling_Position: 'Specialized',
    Components: [
      { Component: 'EscapeXMLMetacharacters' },
      { Component: 'GetVal' },
      { Component: 'GetEnvironmentVariable' },
      { Component: 'NULL' },
      { Component: 'RangeMedian' },
      { Component: 'ReadRegistryString' },
      { Component: 'Soundex_Digits' },
      { Component: 'TOPNIDX' },
      { Component: 'UrlEncode' },
      { Component: 'Message' },
      { Component: 'Soundex' },
    ],
  },
  {
    Fueling_Position: 'String',
    Components: [
      { Component: 'Contains' },
      { Component: 'CountWords' },
      { Component: 'DecomposeUnicodeForMatch' },
      { Component: 'EndsWith' },
      { Component: 'FindString' },
      { Component: 'GetWord' },
      { Component: 'Left' },
      { Component: 'Length' },
      { Component: 'LowerCase' },
      { Component: 'MD5_ASCII' },
      { Component: 'MD5_UNICODE' },
      { Component: 'MD5_UTF8' },
      { Component: 'PadLeft' },
      { Component: 'PadRight' },
      { Component: 'REGEX_CountMatches' },
      { Component: 'REGEX_Match' },
      { Component: 'REGEX_Replace' },
      { Component: 'Replace' },
      { Component: 'ReplaceChar' },
      { Component: 'ReplaceFirst' },
      { Component: 'ReverseString' },
      { Component: 'Right' },
      { Component: 'StartsWith' },
      { Component: 'STRCSPN' },
      { Component: 'StripQuotes' },
      { Component: 'STRSPN' },
      { Component: 'Substring' },
      { Component: 'TitleCase' },
      { Component: 'Trim' },
      { Component: 'TrimLeft' },
      { Component: 'TrimRight' },
      { Component: 'UpperCase' },
      { Component: 'UuidCreate' },
    ],
  },
  {
    Fueling_Position: 'Test',
    Components: [
      { Component: 'CompareDictionary' },
      { Component: 'CompareDigits' },
      { Component: 'CompareEpsilon' },
      { Component: 'IsEmpty' },
      { Component: 'IsInteger' },
      { Component: 'IsNull' },
      { Component: 'IsNumber' },
      { Component: 'IsSpatialObj' },
      { Component: 'IsString' },
    ],
  },
];

export const dataType = [
  'Int',
  'Float',
  'Char',
  'Varchar',
  'Date time',
  'Money',
  'Text',
];

export const dataTypeObject = [
  { id: 0, value: 'Int' },
  { id: 1, value: 'Float' },
  { id: 2, value: 'Char' },
  { id: 3, value: 'Varchar' },
  { id: 4, value: 'Text' },
  { id: 5, value: 'Money' },
  { id: 6, value: 'DateTime' },
];

export const dateTimeFormats = [
  { id: 0, value: 'M/dd/yyyy' },
  { id: 1, value: 'M-dd-yyyy' },
  { id: 2, value: 'MM/dd/yyyy' },
  { id: 3, value: 'MM-dd-yyyy' },
  { id: 4, value: 'dd/MM/yyyy' },
  { id: 5, value: 'dd-MM-yyyy' },
  { id: 6, value: 'yyyy/MM/dd' },
  { id: 7, value: 'yyyy-MM-dd' },
  { id: 8, value: 'yyyy/dd/MM' },
  { id: 9, value: 'yyyy-dd-MM' },
  { id: 10, value: 'dd-M-yyyy' },
  { id: 11, value: 'dd/M/yyyy' },
];

export const joinType = [
  'Inner Join',
  'Left Join',
  'Outer Join',
  'Full Join',
  'Cross Join',
];
